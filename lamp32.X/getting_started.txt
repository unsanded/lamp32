This is a general template for the PIC32 family of microcontrollers.  It's
purpose is to provide a project shell for users to get started designing their
own applications.  Final qualification and testing of this project is left to
the user.

ADVANCED USER TIP

From the main menu, refer to the Task list by going to Window > Tasks (Ctrl+6).
As long as the task window is not configured to filter out any tasks,
the getting started TODO list embedded in this project will be displayed.

Make sure the 'Show tasks for the main project and for the open projects which
depend on it' option is selected on the left hand side of the Tasks window so
that tasks related to other projects are not active.

HOW TO ADD YOUR OWN CODE TO A TEMPLATE

STEP 1

First install the appropriate C compiler if you have not done so already.

See www.microchip.com/compilers

Next, build this project by clicking the Clean and Build Icon (the hammer and
broom symbol) in the MPLAB X IDE Toolbar.  If this project builds, then you are
ready to make changes for your own application.  If the project does not build,
you need to troubleshoot why the project does not build before moving on.

STEP 2

Embed your device's configuration bits into the code.  Instructions for this
are commented in configuration_bits.cpp.  Use the configuration bits generator
if possible.

STEP 3

Unless interrupts are not used in your application, add the interrupt vectors
you intend to use to interrupts.cpp.  Code stubs are provided in interrupts.cpp.
Make sure that you check the device datasheet to confirm that the interrupt
you are using is present in the device selected, and check the device .hpp
file for the most up to date list of interrupt vector mnemonics.

STEP 4

Define system parameters such as the system operating frequency in system.h.

Add system level functions to system.hpp and system.cpp.  For example, if
you want a function to determine the reset source of the device to know if you
need to backup data, do an oscillator switch, enter a low power mode, etc...
these types of functions may be added to system.cpp and prototypes can go in
system.hpp.

STEP 5

Add user level functions to user.hpp and user.cpp.  User level functions are
functions that initialize I/O, initialize user peripherals like the ADC,
compute user algorithms, perform calculations on sampled user data, and so on.
User function prototypes and macros may be placed in user.h, and user
functions themselves may go in user.c.  For C++, peripheral classes may be
written and leveraged.

On the use of .hpp instead of .h - either can be used, but hpp may means that
a particular header file is only for C++.

STEP 6

Add code, classes and variables to main.cpp.  Main code is added on the line
that says <INSERT USER APPLICATION CODE HERE>.  For example, here you would
call functions in user.cpp or system.cpp, or possibly setup your own state
machine or primary code loop.

Global variables may be added to main.cpp as well.  As a general practice,
macros and prototypes may go in header files, but variable declarations should
not go in .hpp files.  Variable declarations should be placed in .cpp files.

Include header files where appropriate.  Note that C++ projects may have
.h and non-.h header files.  Header files with no .h use the std namespace.
Compiler header files with .h use the global namespace.

STEP 7

Design the rest of your application.  Add new files to the application, and
test the finished product.

STEP 8

Document what the project does and include other project information in files
included in the project tree.

KNOWN ISSUES

This message may appear after a successful build:

Configuration Bits: address 0x1FC02FF0: USERID = 22136 does not match any valid
value in the device database.  Setting it to the default value.

To avoid this message, the USERID may be embedded in the device as follows:

const int __attribute__((section(".config_BFC02FF0"))) configword_2ff0 = 0x12345678u;

(Adjust the address appropriately for the device in use if needed).

There will someday be a less painful way of embedding the USERID.  Until then,
this is how it can be done.
